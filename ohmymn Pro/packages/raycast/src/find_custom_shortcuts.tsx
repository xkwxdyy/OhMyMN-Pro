import {
  Action,
  ActionPanel,
  confirmAlert,
  getPreferenceValues,
  Icon,
  launchCommand,
  LaunchType,
  List,
  showToast,
  Toast
} from "@raycast/api"
import { randomUUID } from "crypto"
import got from "got"
import { useEffect, useState } from "react"
import {
  readLocalShortcuts,
  readSharedShortcuts,
  writeLocalShortcuts,
  writeSharedShortcuts
} from "./store"
import type { LocalShortcut, Preferences, SharedShortcut } from "./typings"
import { dateFormat } from "./utils"

const preferences = getPreferenceValues<Preferences>()
const username = preferences.username ? preferences.username : "anonymous"
const lang = preferences.actionInChinese ? "zh" : "en"

export default function () {
  const [localShortcuts, setLocalShortcuts] = useState<LocalShortcut[]>([])
  const [sharedShortcuts, setSharedShortcuts] = useState<LocalShortcut[]>([])

  async function fetchLocalShortcuts() {
    const temp = await readLocalShortcuts()
    if (temp) {
      setLocalShortcuts(JSON.parse(temp as string))
    }
  }

  async function fetchSharedShortcuts(force = false) {
    const temp = await readSharedShortcuts()
    if (!force && temp) {
      const { time, info } = JSON.parse(temp as string)
      // 1 hour
      if (Date.now() - time < 3600000) {
        setSharedShortcuts(info)
        return
      }
    }

    const toast = await showToast({
      style: Toast.Style.Animated,
      title: "Fetching Shortcuts From Internet..."
    })
    try {
      const { status, info } = (await got
        .post("https://ohmymn-shortcut.busiyi.world/api", {
          timeout: {
            request: 5000
          },
          json: {
            action: "fetch",
            lang
          }
        })
        .json()) as
        | {
            status: "success"
            info: SharedShortcut[]
          }
        | {
            status: "failed"
            info: string
          }
      if (status === "success") {
        toast.style = Toast.Style.Success
        toast.title = "Successfully"
        writeSharedShortcuts({ time: Date.now(), info })
        setSharedShortcuts(info)
      } else throw new Error(info)
    } catch (err: any) {
      toast.style = Toast.Style.Failure
      toast.title = "Failed to Fetch"
      toast.message = err.message ?? ""
    }
  }

  async function share(info: LocalShortcut) {
    return (
      (await got
        // .post("http://127.0.0.1:3000/api", {
        .post("https://ohmymn-shortcut.busiyi.world/api", {
          json: {
            action: "create",
            lang,
            info
          }
        })
        .json()) as { status: "success" | "failed"; info: any }
    )
  }

  async function update(info: LocalShortcut) {
    return (await got
      .post("https://ohmymn-shortcut.busiyi.world/api", {
        json: {
          action: "update",
          lang,
          info
        }
      })
      .json()) as { status: "success" | "failed"; info: any }
  }

  useEffect(() => {
    fetchLocalShortcuts()
    fetchSharedShortcuts()
  }, [])

  useEffect(() => {
    writeLocalShortcuts(localShortcuts)
  }, [localShortcuts])

  return (
    <List isShowingDetail>
      <List.Section title="Generated by Yourself">
        {localShortcuts
          .filter(k => !k.download)
          .sort((m, n) => n.modifiedTime - m.modifiedTime)
          .map((shortcut, i) => {
            const isShared = !!sharedShortcuts.find(
              k => k.uuid === shortcut.uuid
            )
            const isReviewing = !isShared && shortcut.notionID
            const status = isShared ? "Sharing" : isReviewing ? "Reviewing" : ""
            return (
              <List.Item
                key={shortcut.uuid + status}
                title={shortcut.form.desc}
                accessories={[{ text: status }]}
                actions={
                  <ActionPanel>
                    <Action.CreateQuicklink
                      quicklink={{
                        link: shortcut.url,
                        application: "QReader.MarginStudyMac",
                        name: "OhMyMN | " + shortcut.form.desc
                      }}
                    />
                    <Action
                      title="Edit Shortcut"
                      icon={Icon.Text}
                      onAction={async () => {
                        await launchCommand({
                          name: "gen_custom_shortcut",
                          type: LaunchType.UserInitiated,
                          context: { form: shortcut.form, uuid: shortcut.uuid }
                        })
                      }}
                    ></Action>
                    <Action.CopyToClipboard
                      title="Copy URL"
                      shortcut={{ modifiers: ["cmd", "shift"], key: "c" }}
                      content={shortcut.url}
                    />
                    <Action
                      title="Duplicate Shortcut"
                      icon={Icon.Map}
                      shortcut={{ modifiers: ["cmd", "shift"], key: "d" }}
                      onAction={async () => {
                        setLocalShortcuts([
                          {
                            ...shortcut,
                            createdTime: Date.now(),
                            modifiedTime: Date.now(),
                            notionID: "",
                            author: username,
                            uuid: randomUUID()
                          },
                          ...localShortcuts
                        ])
                      }}
                    ></Action>
                    <Action
                      title={
                        isShared ? "Update Shared Shortcut" : "Share Shortcut"
                      }
                      icon={Icon.Cloud}
                      shortcut={{ modifiers: ["cmd", "shift"], key: "u" }}
                      onAction={async () => {
                        if (isReviewing) {
                          showToast({ title: "This shortcut is under review" })
                          return
                        }
                        const toast = await showToast({
                          style: Toast.Style.Animated,
                          title: isShared ? "Updating..." : "Sharing..."
                        })
                        try {
                          if (isShared) {
                            const { status, info } = await update({
                              ...shortcut,
                              author: username,
                              modifiedTime: Date.now()
                            })
                            if (status === "success") {
                              toast.style = Toast.Style.Success
                              toast.title = "Successfully. Waiting for review."
                              setLocalShortcuts(
                                localShortcuts.map(k => {
                                  if (k.uuid === shortcut.uuid)
                                    return {
                                      ...k,
                                      notionID: info.id
                                    }
                                  return k
                                })
                              )
                            } else throw new Error(info)
                          } else {
                            const { status, info } = await share({
                              ...shortcut,
                              author: username,
                              modifiedTime: Date.now()
                            })
                            if (status === "success") {
                              toast.style = Toast.Style.Success
                              toast.title = "Successfully. Waiting for review."
                              setLocalShortcuts(
                                localShortcuts.map(k => {
                                  if (k.uuid === shortcut.uuid) {
                                    k.notionID = info.id
                                  }
                                  return k
                                })
                              )
                            } else throw new Error(info)
                          }
                        } catch (err: any) {
                          toast.style = Toast.Style.Failure
                          toast.title = isShared
                            ? "Failed to Update"
                            : "Failed to Share"
                          toast.message = err ?? ""
                        }
                      }}
                    ></Action>
                    <ActionPanel.Section>
                      <Action
                        title="Delete"
                        icon={Icon.Trash}
                        style={Action.Style.Destructive}
                        shortcut={{ modifiers: ["ctrl"], key: "x" }}
                        onAction={async () => {
                          if (
                            await confirmAlert({
                              icon: { source: "logo.png" },
                              title: "Delete This Shortcut?",
                              message: "Warning: This action cannot be undone."
                            })
                          )
                            setLocalShortcuts(
                              localShortcuts.filter((_, index) => index !== i)
                            )
                        }}
                      ></Action>
                    </ActionPanel.Section>
                  </ActionPanel>
                }
                detail={<Detail shortcut={shortcut} />}
              ></List.Item>
            )
          })}
      </List.Section>
      <List.Section title="Download from Internet">
        {localShortcuts
          .filter(k => k.download)
          .sort((m, n) => n.modifiedTime - m.modifiedTime)
          .map((shortcut, i) => (
            <List.Item
              key={shortcut.uuid}
              title={shortcut.form.desc}
              actions={
                <ActionPanel>
                  <Action.CreateQuicklink
                    quicklink={{
                      link: shortcut.url,
                      application: "QReader.MarginStudyMac",
                      name: "OhMyMN | " + shortcut.form.desc
                    }}
                  />
                  <Action
                    title="Edit Shortcut"
                    icon={Icon.Text}
                    onAction={async () => {
                      await launchCommand({
                        name: "gen_custom_shortcut",
                        type: LaunchType.UserInitiated,
                        context: { form: shortcut.form, uuid: shortcut.uuid }
                      })
                    }}
                  ></Action>
                  <Action.CopyToClipboard
                    title="Copy URL"
                    shortcut={{ modifiers: ["cmd", "shift"], key: "c" }}
                    content={shortcut.url}
                  />
                  <Action
                    title="Duplicate Shortcut"
                    icon={Icon.Map}
                    shortcut={{ modifiers: ["cmd", "shift"], key: "d" }}
                    onAction={async () => {
                      setLocalShortcuts([
                        {
                          ...shortcut,
                          createdTime: Date.now(),
                          modifiedTime: Date.now(),
                          download: false,
                          notionID: "",
                          uuid: randomUUID()
                        },
                        ...localShortcuts
                      ])
                    }}
                  ></Action>
                  <Action
                    title="Delete"
                    icon={Icon.Trash}
                    style={Action.Style.Destructive}
                    shortcut={{ modifiers: ["ctrl"], key: "x" }}
                    onAction={async () => {
                      if (
                        await confirmAlert({
                          icon: { source: "logo.png" },
                          title: "Delete This Shortcut?",
                          message: "Warning: This action cannot be undone."
                        })
                      )
                        setLocalShortcuts(
                          localShortcuts.filter((_, index) => index !== i)
                        )
                    }}
                  ></Action>
                </ActionPanel>
              }
              detail={<Detail shortcut={shortcut} />}
            ></List.Item>
          ))}
      </List.Section>
      <List.Section title="Shared by Others">
        {sharedShortcuts
          .sort((m, n) => n.modifiedTime - m.modifiedTime)
          .map(shortcut => (
            <List.Item
              key={shortcut.uuid}
              title={shortcut.form.desc}
              actions={
                <ActionPanel>
                  <Action
                    title="Download Shortcut"
                    icon={Icon.Download}
                    onAction={async () => {
                      if (!localShortcuts.find(k => k.uuid === shortcut.uuid))
                        setLocalShortcuts([
                          {
                            ...shortcut,
                            download: true,
                            modifiedTime: Date.now()
                          },
                          ...localShortcuts
                        ])
                    }}
                  ></Action>
                  <Action.OpenInBrowser
                    title="Open Notion URL"
                    shortcut={{ modifiers: ["cmd", "shift"], key: "o" }}
                    url={
                      "https://busiyi.notion.site/" +
                      shortcut.notionID?.replace(/-/g, "")
                    }
                  ></Action.OpenInBrowser>
                  <Action
                    title="Refresh Shortcuts"
                    icon={Icon.ArrowClockwise}
                    shortcut={{ modifiers: ["cmd", "shift"], key: "r" }}
                    onAction={async () => {
                      await fetchSharedShortcuts(true)
                    }}
                  ></Action>
                </ActionPanel>
              }
              detail={<Detail shortcut={shortcut} />}
            ></List.Item>
          ))}
      </List.Section>
    </List>
  )
}

function Detail({ shortcut }: { shortcut: LocalShortcut }) {
  return (
    <List.Item.Detail
      markdown={shortcut.detail}
      metadata={
        <List.Item.Detail.Metadata>
          {shortcut.moduleNames.length ? (
            <List.Item.Detail.Metadata.TagList title="Optional Modules">
              {shortcut.moduleNames.map((m, i) => (
                <List.Item.Detail.Metadata.TagList.Item key={i} text={m} />
              ))}
            </List.Item.Detail.Metadata.TagList>
          ) : undefined}
          <List.Item.Detail.Metadata.Label
            title="Date Generated"
            text={dateFormat(new Date(shortcut.createdTime))}
          />
          <List.Item.Detail.Metadata.Label
            title="Date Modified"
            text={dateFormat(new Date(shortcut.modifiedTime))}
          />
          <List.Item.Detail.Metadata.Label
            title="Author"
            text={shortcut.author}
          />
        </List.Item.Detail.Metadata>
      }
    />
  )
}
